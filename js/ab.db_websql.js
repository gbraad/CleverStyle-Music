// Generated by CoffeeScript 1.9.3

/**
 * @package   CleverStyle Music
 * @category  app
 * @author    Nazar Mokrynskyi <nazar@mokrynskyi.com>
 * @copyright Copyright (c) 2015, Nazar Mokrynskyi
 * @license   MIT License, see license.txt
 */

(function() {
  var db, on_db_ready, onready, wrap;

  if (!window.openDatabase || window.indexedDB) {
    return;
  }

  db = null;

  on_db_ready = [];

  openDatabase('music_db', '3.0', 'Music DB', 5 * 1024 * 1024, function(new_db) {
    return new_db.changeVersion('', '3.0', function(tx) {
      tx.executeSql('CREATE TABLE `music` ( `id` INTEGER PRIMARY KEY AUTOINCREMENT, `name` TEXT )');
      return tx.executeSql('CREATE TABLE `meta` ( `id` INTEGER PRIMARY KEY, `album` TEXT, `artist` TEXT, `genre` TEXT, `rated` TEXT, `title` TEXT, `year` TEXT )', [], function(tx) {
        return tx.executeSql('CREATE INDEX `album` ON `meta` (`album`)', [], function(tx) {
          return tx.executeSql('CREATE INDEX `artist` ON `meta` (`artist`)', [], function(tx) {
            return tx.executeSql('CREATE INDEX `genre` ON `meta` (`genre`)', [], function(tx) {
              return tx.executeSql('CREATE INDEX `rated` ON `meta` (`rated`)', [], function(tx) {
                return tx.executeSql('CREATE INDEX `title` ON `meta` (`title`)', [], function(tx) {
                  return tx.executeSql('CREATE INDEX `year` ON `meta` (`year`)', [], function(tx) {
                    var callback, results1;
                    db = new_db;
                    results1 = [];
                    while (callback = on_db_ready.shift()) {
                      results1.push(callback());
                    }
                    return results1;
                  });
                });
              });
            });
          });
        });
      });
    });
  });

  onready = function(callback) {
    callback = callback.bind(this);
    if (db) {
      callback();
    } else {
      on_db_ready.push(callback);
    }
  };

  wrap = function(request_callback) {
    return function(success_callback, error_callback) {
      return onready(function() {
        return request_callback(success_callback, error_callback);
      });
    };
  };

  cs.db.read = function(store_name, value, field) {
    if (field == null) {
      field = 'id';
    }
    return wrap(function(success_callback, error_callback) {
      return db.readTransaction(function(tx) {
        return tx.executeSql("SELECT * FROM `" + store_name + "` WHERE `" + field + "` = ?", [value], function(tx, results) {
          if (results.rows.length) {
            return success_callback(results.rows.item(0));
          } else {
            return error_callback();
          }
        }, error_callback);
      });
    });
  };

  cs.db.read_all = function(store_name, callback, filter) {
    return onready(function() {
      return db.readTransaction(function(tx) {
        return tx.executeSql("SELECT * FROM `" + store_name + "`", [], function(tx, results) {
          var all, current_item, i, j, ref;
          all = [];
          for (i = j = 0, ref = results.rows.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            current_item = results.item(i);
            if (!filter || filter(current_item)) {
              all.push(current_item);
            }
          }
          return callback(all);
        });
      });
    });
  };

  cs.db.count = function(store_name, callback, filter) {
    return onready(function() {
      return db.readTransaction(function(tx) {
        return tx.executeSql("SELECT * FROM `" + store_name + "`", [], function(tx, results) {
          var count, current_item, i, j, ref;
          count = 0;
          for (i = j = 0, ref = results.rows.length - 1; 0 <= ref ? j <= ref : j >= ref; i = 0 <= ref ? ++j : --j) {
            current_item = results.item(i);
            if (!filter || filter(current_item)) {
              ++count;
            }
          }
          return callback(count);
        });
      });
    });
  };

  cs.db.insert = function(store_name, data) {
    return wrap(function(success_callback, error_callback) {
      return db.transaction(function(tx) {
        var column, columns, placeholders, value, values;
        columns = [];
        values = [];
        placeholders = [];
        for (column in data) {
          value = data[column];
          columns.push(column);
          values.push(value);
          placeholders.push('?');
        }
        columns = '`' + columns.join('`, `') + '`';
        placeholders = placeholders.join(',');
        return tx.executeSql("INSERT INTO `" + store_name + "` (" + columns + ") VALUES (" + placeholders + ")", values, success_callback, error_callback);
      });
    });
  };

  cs.db["delete"] = function(store_name, id) {
    return wrap(function(success_callback, error_callback) {
      return db.transaction(function(tx) {
        return tx.executeSql("DELETE FROM `" + store_name + "` WHERE `id` = ?", [id], success_callback, error_callback);
      });
    });
  };

}).call(this);
